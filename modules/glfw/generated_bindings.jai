//
// This file was auto-generated using the following command:
//
// /Users/adragomi/work/personal/jaitest/modules/dnssd/generate
//



GLFW_VERSION_MAJOR :: 3;

GLFW_VERSION_MINOR :: 3;

GLFW_VERSION_REVISION :: 8;

GLFW_TRUE :: 1;

GLFW_FALSE :: 0;

GLFW_RELEASE :: 0;

GLFW_PRESS :: 1;

GLFW_REPEAT :: 2;

GLFW_HAT_CENTERED :: 0;
GLFW_HAT_UP :: 1;
GLFW_HAT_RIGHT :: 2;
GLFW_HAT_DOWN :: 4;
GLFW_HAT_LEFT :: 8;
GLFW_HAT_RIGHT_UP :: GLFW_HAT_RIGHT | GLFW_HAT_UP;
GLFW_HAT_RIGHT_DOWN :: GLFW_HAT_RIGHT | GLFW_HAT_DOWN;
GLFW_HAT_LEFT_UP :: GLFW_HAT_LEFT | GLFW_HAT_UP;
GLFW_HAT_LEFT_DOWN :: GLFW_HAT_LEFT | GLFW_HAT_DOWN;

GLFW_KEY_UNKNOWN :: -1;

GLFW_KEY_SPACE :: 32;
GLFW_KEY_APOSTROPHE :: 39;
GLFW_KEY_COMMA :: 44;
GLFW_KEY_MINUS :: 45;
GLFW_KEY_PERIOD :: 46;
GLFW_KEY_SLASH :: 47;
GLFW_KEY_0 :: 48;
GLFW_KEY_1 :: 49;
GLFW_KEY_2 :: 50;
GLFW_KEY_3 :: 51;
GLFW_KEY_4 :: 52;
GLFW_KEY_5 :: 53;
GLFW_KEY_6 :: 54;
GLFW_KEY_7 :: 55;
GLFW_KEY_8 :: 56;
GLFW_KEY_9 :: 57;
GLFW_KEY_SEMICOLON :: 59;
GLFW_KEY_EQUAL :: 61;
GLFW_KEY_A :: 65;
GLFW_KEY_B :: 66;
GLFW_KEY_C :: 67;
GLFW_KEY_D :: 68;
GLFW_KEY_E :: 69;
GLFW_KEY_F :: 70;
GLFW_KEY_G :: 71;
GLFW_KEY_H :: 72;
GLFW_KEY_I :: 73;
GLFW_KEY_J :: 74;
GLFW_KEY_K :: 75;
GLFW_KEY_L :: 76;
GLFW_KEY_M :: 77;
GLFW_KEY_N :: 78;
GLFW_KEY_O :: 79;
GLFW_KEY_P :: 80;
GLFW_KEY_Q :: 81;
GLFW_KEY_R :: 82;
GLFW_KEY_S :: 83;
GLFW_KEY_T :: 84;
GLFW_KEY_U :: 85;
GLFW_KEY_V :: 86;
GLFW_KEY_W :: 87;
GLFW_KEY_X :: 88;
GLFW_KEY_Y :: 89;
GLFW_KEY_Z :: 90;
GLFW_KEY_LEFT_BRACKET :: 91;
GLFW_KEY_BACKSLASH :: 92;
GLFW_KEY_RIGHT_BRACKET :: 93;
GLFW_KEY_GRAVE_ACCENT :: 96;
GLFW_KEY_WORLD_1 :: 161;
GLFW_KEY_WORLD_2 :: 162;

GLFW_KEY_ESCAPE :: 256;
GLFW_KEY_ENTER :: 257;
GLFW_KEY_TAB :: 258;
GLFW_KEY_BACKSPACE :: 259;
GLFW_KEY_INSERT :: 260;
GLFW_KEY_DELETE :: 261;
GLFW_KEY_RIGHT :: 262;
GLFW_KEY_LEFT :: 263;
GLFW_KEY_DOWN :: 264;
GLFW_KEY_UP :: 265;
GLFW_KEY_PAGE_UP :: 266;
GLFW_KEY_PAGE_DOWN :: 267;
GLFW_KEY_HOME :: 268;
GLFW_KEY_END :: 269;
GLFW_KEY_CAPS_LOCK :: 280;
GLFW_KEY_SCROLL_LOCK :: 281;
GLFW_KEY_NUM_LOCK :: 282;
GLFW_KEY_PRINT_SCREEN :: 283;
GLFW_KEY_PAUSE :: 284;
GLFW_KEY_F1 :: 290;
GLFW_KEY_F2 :: 291;
GLFW_KEY_F3 :: 292;
GLFW_KEY_F4 :: 293;
GLFW_KEY_F5 :: 294;
GLFW_KEY_F6 :: 295;
GLFW_KEY_F7 :: 296;
GLFW_KEY_F8 :: 297;
GLFW_KEY_F9 :: 298;
GLFW_KEY_F10 :: 299;
GLFW_KEY_F11 :: 300;
GLFW_KEY_F12 :: 301;
GLFW_KEY_F13 :: 302;
GLFW_KEY_F14 :: 303;
GLFW_KEY_F15 :: 304;
GLFW_KEY_F16 :: 305;
GLFW_KEY_F17 :: 306;
GLFW_KEY_F18 :: 307;
GLFW_KEY_F19 :: 308;
GLFW_KEY_F20 :: 309;
GLFW_KEY_F21 :: 310;
GLFW_KEY_F22 :: 311;
GLFW_KEY_F23 :: 312;
GLFW_KEY_F24 :: 313;
GLFW_KEY_F25 :: 314;
GLFW_KEY_KP_0 :: 320;
GLFW_KEY_KP_1 :: 321;
GLFW_KEY_KP_2 :: 322;
GLFW_KEY_KP_3 :: 323;
GLFW_KEY_KP_4 :: 324;
GLFW_KEY_KP_5 :: 325;
GLFW_KEY_KP_6 :: 326;
GLFW_KEY_KP_7 :: 327;
GLFW_KEY_KP_8 :: 328;
GLFW_KEY_KP_9 :: 329;
GLFW_KEY_KP_DECIMAL :: 330;
GLFW_KEY_KP_DIVIDE :: 331;
GLFW_KEY_KP_MULTIPLY :: 332;
GLFW_KEY_KP_SUBTRACT :: 333;
GLFW_KEY_KP_ADD :: 334;
GLFW_KEY_KP_ENTER :: 335;
GLFW_KEY_KP_EQUAL :: 336;
GLFW_KEY_LEFT_SHIFT :: 340;
GLFW_KEY_LEFT_CONTROL :: 341;
GLFW_KEY_LEFT_ALT :: 342;
GLFW_KEY_LEFT_SUPER :: 343;
GLFW_KEY_RIGHT_SHIFT :: 344;
GLFW_KEY_RIGHT_CONTROL :: 345;
GLFW_KEY_RIGHT_ALT :: 346;
GLFW_KEY_RIGHT_SUPER :: 347;
GLFW_KEY_MENU :: 348;

GLFW_KEY_LAST :: GLFW_KEY_MENU;

GLFW_MOD_SHIFT :: 0x0001;

GLFW_MOD_CONTROL :: 0x0002;

GLFW_MOD_ALT :: 0x0004;

GLFW_MOD_SUPER :: 0x0008;

GLFW_MOD_CAPS_LOCK :: 0x0010;

GLFW_MOD_NUM_LOCK :: 0x0020;

GLFW_MOUSE_BUTTON_1 :: 0;
GLFW_MOUSE_BUTTON_2 :: 1;
GLFW_MOUSE_BUTTON_3 :: 2;
GLFW_MOUSE_BUTTON_4 :: 3;
GLFW_MOUSE_BUTTON_5 :: 4;
GLFW_MOUSE_BUTTON_6 :: 5;
GLFW_MOUSE_BUTTON_7 :: 6;
GLFW_MOUSE_BUTTON_8 :: 7;
GLFW_MOUSE_BUTTON_LAST :: GLFW_MOUSE_BUTTON_8;
GLFW_MOUSE_BUTTON_LEFT :: GLFW_MOUSE_BUTTON_1;
GLFW_MOUSE_BUTTON_RIGHT :: GLFW_MOUSE_BUTTON_2;
GLFW_MOUSE_BUTTON_MIDDLE :: GLFW_MOUSE_BUTTON_3;

GLFW_JOYSTICK_1 :: 0;
GLFW_JOYSTICK_2 :: 1;
GLFW_JOYSTICK_3 :: 2;
GLFW_JOYSTICK_4 :: 3;
GLFW_JOYSTICK_5 :: 4;
GLFW_JOYSTICK_6 :: 5;
GLFW_JOYSTICK_7 :: 6;
GLFW_JOYSTICK_8 :: 7;
GLFW_JOYSTICK_9 :: 8;
GLFW_JOYSTICK_10 :: 9;
GLFW_JOYSTICK_11 :: 10;
GLFW_JOYSTICK_12 :: 11;
GLFW_JOYSTICK_13 :: 12;
GLFW_JOYSTICK_14 :: 13;
GLFW_JOYSTICK_15 :: 14;
GLFW_JOYSTICK_16 :: 15;
GLFW_JOYSTICK_LAST :: GLFW_JOYSTICK_16;

GLFW_GAMEPAD_BUTTON_A :: 0;
GLFW_GAMEPAD_BUTTON_B :: 1;
GLFW_GAMEPAD_BUTTON_X :: 2;
GLFW_GAMEPAD_BUTTON_Y :: 3;
GLFW_GAMEPAD_BUTTON_LEFT_BUMPER :: 4;
GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER :: 5;
GLFW_GAMEPAD_BUTTON_BACK :: 6;
GLFW_GAMEPAD_BUTTON_START :: 7;
GLFW_GAMEPAD_BUTTON_GUIDE :: 8;
GLFW_GAMEPAD_BUTTON_LEFT_THUMB :: 9;
GLFW_GAMEPAD_BUTTON_RIGHT_THUMB :: 10;
GLFW_GAMEPAD_BUTTON_DPAD_UP :: 11;
GLFW_GAMEPAD_BUTTON_DPAD_RIGHT :: 12;
GLFW_GAMEPAD_BUTTON_DPAD_DOWN :: 13;
GLFW_GAMEPAD_BUTTON_DPAD_LEFT :: 14;
GLFW_GAMEPAD_BUTTON_LAST :: GLFW_GAMEPAD_BUTTON_DPAD_LEFT;

GLFW_GAMEPAD_BUTTON_CROSS :: GLFW_GAMEPAD_BUTTON_A;
GLFW_GAMEPAD_BUTTON_CIRCLE :: GLFW_GAMEPAD_BUTTON_B;
GLFW_GAMEPAD_BUTTON_SQUARE :: GLFW_GAMEPAD_BUTTON_X;
GLFW_GAMEPAD_BUTTON_TRIANGLE :: GLFW_GAMEPAD_BUTTON_Y;

GLFW_GAMEPAD_AXIS_LEFT_X :: 0;
GLFW_GAMEPAD_AXIS_LEFT_Y :: 1;
GLFW_GAMEPAD_AXIS_RIGHT_X :: 2;
GLFW_GAMEPAD_AXIS_RIGHT_Y :: 3;
GLFW_GAMEPAD_AXIS_LEFT_TRIGGER :: 4;
GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER :: 5;
GLFW_GAMEPAD_AXIS_LAST :: GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;

GLFW_NO_ERROR :: 0;

GLFW_NOT_INITIALIZED :: 0x00010001;

GLFW_NO_CURRENT_CONTEXT :: 0x00010002;

GLFW_INVALID_ENUM :: 0x00010003;

GLFW_INVALID_VALUE :: 0x00010004;

GLFW_OUT_OF_MEMORY :: 0x00010005;

GLFW_API_UNAVAILABLE :: 0x00010006;

GLFW_VERSION_UNAVAILABLE :: 0x00010007;

GLFW_PLATFORM_ERROR :: 0x00010008;

GLFW_FORMAT_UNAVAILABLE :: 0x00010009;

GLFW_NO_WINDOW_CONTEXT :: 0x0001000A;

GLFW_FOCUSED :: 0x00020001;

GLFW_ICONIFIED :: 0x00020002;

GLFW_RESIZABLE :: 0x00020003;

GLFW_VISIBLE :: 0x00020004;

GLFW_DECORATED :: 0x00020005;

GLFW_AUTO_ICONIFY :: 0x00020006;

GLFW_FLOATING :: 0x00020007;

GLFW_MAXIMIZED :: 0x00020008;

GLFW_CENTER_CURSOR :: 0x00020009;

GLFW_TRANSPARENT_FRAMEBUFFER :: 0x0002000A;

GLFW_HOVERED :: 0x0002000B;

GLFW_FOCUS_ON_SHOW :: 0x0002000C;

GLFW_RED_BITS :: 0x00021001;

GLFW_GREEN_BITS :: 0x00021002;

GLFW_BLUE_BITS :: 0x00021003;

GLFW_ALPHA_BITS :: 0x00021004;

GLFW_DEPTH_BITS :: 0x00021005;

GLFW_STENCIL_BITS :: 0x00021006;

GLFW_ACCUM_RED_BITS :: 0x00021007;

GLFW_ACCUM_GREEN_BITS :: 0x00021008;

GLFW_ACCUM_BLUE_BITS :: 0x00021009;

GLFW_ACCUM_ALPHA_BITS :: 0x0002100A;

GLFW_AUX_BUFFERS :: 0x0002100B;

GLFW_STEREO :: 0x0002100C;

GLFW_SAMPLES :: 0x0002100D;

GLFW_SRGB_CAPABLE :: 0x0002100E;

GLFW_REFRESH_RATE :: 0x0002100F;

GLFW_DOUBLEBUFFER :: 0x00021010;

GLFW_CLIENT_API :: 0x00022001;

GLFW_CONTEXT_VERSION_MAJOR :: 0x00022002;

GLFW_CONTEXT_VERSION_MINOR :: 0x00022003;

GLFW_CONTEXT_REVISION :: 0x00022004;

GLFW_CONTEXT_ROBUSTNESS :: 0x00022005;

GLFW_OPENGL_FORWARD_COMPAT :: 0x00022006;

GLFW_OPENGL_DEBUG_CONTEXT :: 0x00022007;

GLFW_OPENGL_PROFILE :: 0x00022008;

GLFW_CONTEXT_RELEASE_BEHAVIOR :: 0x00022009;

GLFW_CONTEXT_NO_ERROR :: 0x0002200A;

GLFW_CONTEXT_CREATION_API :: 0x0002200B;

GLFW_SCALE_TO_MONITOR :: 0x0002200C;

GLFW_COCOA_RETINA_FRAMEBUFFER :: 0x00023001;

GLFW_COCOA_FRAME_NAME :: 0x00023002;

GLFW_COCOA_GRAPHICS_SWITCHING :: 0x00023003;

GLFW_X11_CLASS_NAME :: 0x00024001;

GLFW_X11_INSTANCE_NAME :: 0x00024002;

GLFW_NO_API :: 0;
GLFW_OPENGL_API :: 0x00030001;
GLFW_OPENGL_ES_API :: 0x00030002;

GLFW_NO_ROBUSTNESS :: 0;
GLFW_NO_RESET_NOTIFICATION :: 0x00031001;
GLFW_LOSE_CONTEXT_ON_RESET :: 0x00031002;

GLFW_OPENGL_ANY_PROFILE :: 0;
GLFW_OPENGL_CORE_PROFILE :: 0x00032001;
GLFW_OPENGL_COMPAT_PROFILE :: 0x00032002;

GLFW_CURSOR :: 0x00033001;
GLFW_STICKY_KEYS :: 0x00033002;
GLFW_STICKY_MOUSE_BUTTONS :: 0x00033003;
GLFW_LOCK_KEY_MODS :: 0x00033004;
GLFW_RAW_MOUSE_MOTION :: 0x00033005;

GLFW_CURSOR_NORMAL :: 0x00034001;
GLFW_CURSOR_HIDDEN :: 0x00034002;
GLFW_CURSOR_DISABLED :: 0x00034003;

GLFW_ANY_RELEASE_BEHAVIOR :: 0;
GLFW_RELEASE_BEHAVIOR_FLUSH :: 0x00035001;
GLFW_RELEASE_BEHAVIOR_NONE :: 0x00035002;

GLFW_NATIVE_CONTEXT_API :: 0x00036001;
GLFW_EGL_CONTEXT_API :: 0x00036002;
GLFW_OSMESA_CONTEXT_API :: 0x00036003;

GLFW_ARROW_CURSOR :: 0x00036001;

GLFW_IBEAM_CURSOR :: 0x00036002;

GLFW_CROSSHAIR_CURSOR :: 0x00036003;

GLFW_HAND_CURSOR :: 0x00036004;

GLFW_HRESIZE_CURSOR :: 0x00036005;

GLFW_VRESIZE_CURSOR :: 0x00036006;

GLFW_CONNECTED :: 0x00040001;
GLFW_DISCONNECTED :: 0x00040002;

GLFW_JOYSTICK_HAT_BUTTONS :: 0x00050001;

GLFW_COCOA_CHDIR_RESOURCES :: 0x00051001;

GLFW_COCOA_MENUBAR :: 0x00051002;

GLFW_DONT_CARE :: -1;

glfwGetRequiredInstanceExtensions :: (count: *u32) -> **u8 #foreign libglfw "_glfwGetRequiredInstanceExtensions";

GLFWglproc :: #type () -> void #c_call;

GLFWvkproc :: #type () -> void #c_call;

GLFWmonitor :: struct {}

GLFWwindow :: struct {}

GLFWcursor :: struct {}

GLFWerrorfun :: #type (a0: s32, a1: *u8) -> void #c_call;

GLFWwindowposfun :: #type (a0: *GLFWwindow, a1: s32, a2: s32) -> void #c_call;

GLFWwindowsizefun :: #type (a0: *GLFWwindow, a1: s32, a2: s32) -> void #c_call;

GLFWwindowclosefun :: #type (a0: *GLFWwindow) -> void #c_call;

GLFWwindowrefreshfun :: #type (a0: *GLFWwindow) -> void #c_call;

GLFWwindowfocusfun :: #type (a0: *GLFWwindow, a1: s32) -> void #c_call;

GLFWwindowiconifyfun :: #type (a0: *GLFWwindow, a1: s32) -> void #c_call;

GLFWwindowmaximizefun :: #type (a0: *GLFWwindow, a1: s32) -> void #c_call;

GLFWframebuffersizefun :: #type (a0: *GLFWwindow, a1: s32, a2: s32) -> void #c_call;

GLFWwindowcontentscalefun :: #type (a0: *GLFWwindow, a1: float, a2: float) -> void #c_call;

GLFWmousebuttonfun :: #type (a0: *GLFWwindow, a1: s32, a2: s32, a3: s32) -> void #c_call;

GLFWcursorposfun :: #type (a0: *GLFWwindow, a1: float64, a2: float64) -> void #c_call;

GLFWcursorenterfun :: #type (a0: *GLFWwindow, a1: s32) -> void #c_call;

GLFWscrollfun :: #type (a0: *GLFWwindow, a1: float64, a2: float64) -> void #c_call;

GLFWkeyfun :: #type (a0: *GLFWwindow, a1: s32, a2: s32, a3: s32, a4: s32) -> void #c_call;

GLFWcharfun :: #type (a0: *GLFWwindow, a1: u32) -> void #c_call;

GLFWcharmodsfun :: #type (a0: *GLFWwindow, a1: u32, a2: s32) -> void #c_call;

GLFWdropfun :: #type (a0: *GLFWwindow, a1: s32, a2: **u8) -> void #c_call;

GLFWmonitorfun :: #type (a0: *GLFWmonitor, a1: s32) -> void #c_call;

GLFWjoystickfun :: #type (a0: s32, a1: s32) -> void #c_call;

GLFWvidmode :: struct {
    width:       s32;

    height:      s32;

    redBits:     s32;

    greenBits:   s32;

    blueBits:    s32;

    refreshRate: s32;
}

GLFWgammaramp :: struct {
    red:   *u16;

    green: *u16;

    blue:  *u16;

    size:  u32;
}

GLFWimage :: struct {
    width:  s32;

    height: s32;

    pixels: *u8;
}

GLFWgamepadstate :: struct {
    buttons: [15] u8;

    axes:    [6] float;
}

glfwInit :: () -> s32 #foreign libglfw "_glfwInit";

glfwTerminate :: () -> void #foreign libglfw "_glfwTerminate";

glfwInitHint :: (hint: s32, value: s32) -> void #foreign libglfw "_glfwInitHint";

glfwGetVersion :: (major: *s32, minor: *s32, rev: *s32) -> void #foreign libglfw "_glfwGetVersion";

glfwGetVersionString :: () -> *u8 #foreign libglfw "_glfwGetVersionString";

glfwGetError :: (description: **u8) -> s32 #foreign libglfw "_glfwGetError";

glfwSetErrorCallback :: (callback: GLFWerrorfun) -> GLFWerrorfun #foreign libglfw "_glfwSetErrorCallback";

glfwGetMonitors :: (count: *s32) -> **GLFWmonitor #foreign libglfw "_glfwGetMonitors";

glfwGetPrimaryMonitor :: () -> *GLFWmonitor #foreign libglfw "_glfwGetPrimaryMonitor";

glfwGetMonitorPos :: (monitor: *GLFWmonitor, xpos: *s32, ypos: *s32) -> void #foreign libglfw "_glfwGetMonitorPos";

glfwGetMonitorWorkarea :: (monitor: *GLFWmonitor, xpos: *s32, ypos: *s32, width: *s32, height: *s32) -> void #foreign libglfw "_glfwGetMonitorWorkarea";

glfwGetMonitorPhysicalSize :: (monitor: *GLFWmonitor, widthMM: *s32, heightMM: *s32) -> void #foreign libglfw "_glfwGetMonitorPhysicalSize";

glfwGetMonitorContentScale :: (monitor: *GLFWmonitor, xscale: *float, yscale: *float) -> void #foreign libglfw "_glfwGetMonitorContentScale";

glfwGetMonitorName :: (monitor: *GLFWmonitor) -> *u8 #foreign libglfw "_glfwGetMonitorName";

glfwSetMonitorUserPointer :: (monitor: *GLFWmonitor, pointer: *void) -> void #foreign libglfw "_glfwSetMonitorUserPointer";

glfwGetMonitorUserPointer :: (monitor: *GLFWmonitor) -> *void #foreign libglfw "_glfwGetMonitorUserPointer";

glfwSetMonitorCallback :: (callback: GLFWmonitorfun) -> GLFWmonitorfun #foreign libglfw "_glfwSetMonitorCallback";

glfwGetVideoModes :: (monitor: *GLFWmonitor, count: *s32) -> *GLFWvidmode #foreign libglfw "_glfwGetVideoModes";

glfwGetVideoMode :: (monitor: *GLFWmonitor) -> *GLFWvidmode #foreign libglfw "_glfwGetVideoMode";

glfwSetGamma :: (monitor: *GLFWmonitor, gamma: float) -> void #foreign libglfw "_glfwSetGamma";

glfwGetGammaRamp :: (monitor: *GLFWmonitor) -> *GLFWgammaramp #foreign libglfw "_glfwGetGammaRamp";

glfwSetGammaRamp :: (monitor: *GLFWmonitor, ramp: *GLFWgammaramp) -> void #foreign libglfw "_glfwSetGammaRamp";

glfwDefaultWindowHints :: () -> void #foreign libglfw "_glfwDefaultWindowHints";

glfwWindowHint :: (hint: s32, value: s32) -> void #foreign libglfw "_glfwWindowHint";

glfwWindowHintString :: (hint: s32, value: *u8) -> void #foreign libglfw "_glfwWindowHintString";

glfwCreateWindow :: (width: s32, height: s32, title: *u8, monitor: *GLFWmonitor, share: *GLFWwindow) -> *GLFWwindow #foreign libglfw "_glfwCreateWindow";

glfwDestroyWindow :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwDestroyWindow";

glfwWindowShouldClose :: (window: *GLFWwindow) -> s32 #foreign libglfw "_glfwWindowShouldClose";

glfwSetWindowShouldClose :: (window: *GLFWwindow, value: s32) -> void #foreign libglfw "_glfwSetWindowShouldClose";

glfwSetWindowTitle :: (window: *GLFWwindow, title: *u8) -> void #foreign libglfw "_glfwSetWindowTitle";

glfwSetWindowIcon :: (window: *GLFWwindow, count: s32, images: *GLFWimage) -> void #foreign libglfw "_glfwSetWindowIcon";

glfwGetWindowPos :: (window: *GLFWwindow, xpos: *s32, ypos: *s32) -> void #foreign libglfw "_glfwGetWindowPos";

glfwSetWindowPos :: (window: *GLFWwindow, xpos: s32, ypos: s32) -> void #foreign libglfw "_glfwSetWindowPos";

glfwGetWindowSize :: (window: *GLFWwindow, width: *s32, height: *s32) -> void #foreign libglfw "_glfwGetWindowSize";

glfwSetWindowSizeLimits :: (window: *GLFWwindow, minwidth: s32, minheight: s32, maxwidth: s32, maxheight: s32) -> void #foreign libglfw "_glfwSetWindowSizeLimits";

glfwSetWindowAspectRatio :: (window: *GLFWwindow, numer: s32, denom: s32) -> void #foreign libglfw "_glfwSetWindowAspectRatio";

glfwSetWindowSize :: (window: *GLFWwindow, width: s32, height: s32) -> void #foreign libglfw "_glfwSetWindowSize";

glfwGetFramebufferSize :: (window: *GLFWwindow, width: *s32, height: *s32) -> void #foreign libglfw "_glfwGetFramebufferSize";

glfwGetWindowFrameSize :: (window: *GLFWwindow, left: *s32, top: *s32, right: *s32, bottom: *s32) -> void #foreign libglfw "_glfwGetWindowFrameSize";

glfwGetWindowContentScale :: (window: *GLFWwindow, xscale: *float, yscale: *float) -> void #foreign libglfw "_glfwGetWindowContentScale";

glfwGetWindowOpacity :: (window: *GLFWwindow) -> float #foreign libglfw "_glfwGetWindowOpacity";

glfwSetWindowOpacity :: (window: *GLFWwindow, opacity: float) -> void #foreign libglfw "_glfwSetWindowOpacity";

glfwIconifyWindow :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwIconifyWindow";

glfwRestoreWindow :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwRestoreWindow";

glfwMaximizeWindow :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwMaximizeWindow";

glfwShowWindow :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwShowWindow";

glfwHideWindow :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwHideWindow";

glfwFocusWindow :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwFocusWindow";

glfwRequestWindowAttention :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwRequestWindowAttention";

glfwGetWindowMonitor :: (window: *GLFWwindow) -> *GLFWmonitor #foreign libglfw "_glfwGetWindowMonitor";

glfwSetWindowMonitor :: (window: *GLFWwindow, monitor: *GLFWmonitor, xpos: s32, ypos: s32, width: s32, height: s32, refreshRate: s32) -> void #foreign libglfw "_glfwSetWindowMonitor";

glfwGetWindowAttrib :: (window: *GLFWwindow, attrib: s32) -> s32 #foreign libglfw "_glfwGetWindowAttrib";

glfwSetWindowAttrib :: (window: *GLFWwindow, attrib: s32, value: s32) -> void #foreign libglfw "_glfwSetWindowAttrib";

glfwSetWindowUserPointer :: (window: *GLFWwindow, pointer: *void) -> void #foreign libglfw "_glfwSetWindowUserPointer";

glfwGetWindowUserPointer :: (window: *GLFWwindow) -> *void #foreign libglfw "_glfwGetWindowUserPointer";

glfwSetWindowPosCallback :: (window: *GLFWwindow, callback: GLFWwindowposfun) -> GLFWwindowposfun #foreign libglfw "_glfwSetWindowPosCallback";

glfwSetWindowSizeCallback :: (window: *GLFWwindow, callback: GLFWwindowsizefun) -> GLFWwindowsizefun #foreign libglfw "_glfwSetWindowSizeCallback";

glfwSetWindowCloseCallback :: (window: *GLFWwindow, callback: GLFWwindowclosefun) -> GLFWwindowclosefun #foreign libglfw "_glfwSetWindowCloseCallback";

glfwSetWindowRefreshCallback :: (window: *GLFWwindow, callback: GLFWwindowrefreshfun) -> GLFWwindowrefreshfun #foreign libglfw "_glfwSetWindowRefreshCallback";

glfwSetWindowFocusCallback :: (window: *GLFWwindow, callback: GLFWwindowfocusfun) -> GLFWwindowfocusfun #foreign libglfw "_glfwSetWindowFocusCallback";

glfwSetWindowIconifyCallback :: (window: *GLFWwindow, callback: GLFWwindowiconifyfun) -> GLFWwindowiconifyfun #foreign libglfw "_glfwSetWindowIconifyCallback";

glfwSetWindowMaximizeCallback :: (window: *GLFWwindow, callback: GLFWwindowmaximizefun) -> GLFWwindowmaximizefun #foreign libglfw "_glfwSetWindowMaximizeCallback";

glfwSetFramebufferSizeCallback :: (window: *GLFWwindow, callback: GLFWframebuffersizefun) -> GLFWframebuffersizefun #foreign libglfw "_glfwSetFramebufferSizeCallback";

glfwSetWindowContentScaleCallback :: (window: *GLFWwindow, callback: GLFWwindowcontentscalefun) -> GLFWwindowcontentscalefun #foreign libglfw "_glfwSetWindowContentScaleCallback";

glfwPollEvents :: () -> void #foreign libglfw "_glfwPollEvents";

glfwWaitEvents :: () -> void #foreign libglfw "_glfwWaitEvents";

glfwWaitEventsTimeout :: (timeout: float64) -> void #foreign libglfw "_glfwWaitEventsTimeout";

glfwPostEmptyEvent :: () -> void #foreign libglfw "_glfwPostEmptyEvent";

glfwGetInputMode :: (window: *GLFWwindow, mode: s32) -> s32 #foreign libglfw "_glfwGetInputMode";

glfwSetInputMode :: (window: *GLFWwindow, mode: s32, value: s32) -> void #foreign libglfw "_glfwSetInputMode";

glfwRawMouseMotionSupported :: () -> s32 #foreign libglfw "_glfwRawMouseMotionSupported";

glfwGetKeyName :: (key: s32, scancode: s32) -> *u8 #foreign libglfw "_glfwGetKeyName";

glfwGetKeyScancode :: (key: s32) -> s32 #foreign libglfw "_glfwGetKeyScancode";

glfwGetKey :: (window: *GLFWwindow, key: s32) -> s32 #foreign libglfw "_glfwGetKey";

glfwGetMouseButton :: (window: *GLFWwindow, button: s32) -> s32 #foreign libglfw "_glfwGetMouseButton";

glfwGetCursorPos :: (window: *GLFWwindow, xpos: *float64, ypos: *float64) -> void #foreign libglfw "_glfwGetCursorPos";

glfwSetCursorPos :: (window: *GLFWwindow, xpos: float64, ypos: float64) -> void #foreign libglfw "_glfwSetCursorPos";

glfwCreateCursor :: (image: *GLFWimage, xhot: s32, yhot: s32) -> *GLFWcursor #foreign libglfw "_glfwCreateCursor";

glfwCreateStandardCursor :: (shape: s32) -> *GLFWcursor #foreign libglfw "_glfwCreateStandardCursor";

glfwDestroyCursor :: (cursor: *GLFWcursor) -> void #foreign libglfw "_glfwDestroyCursor";

glfwSetCursor :: (window: *GLFWwindow, cursor: *GLFWcursor) -> void #foreign libglfw "_glfwSetCursor";

glfwSetKeyCallback :: (window: *GLFWwindow, callback: GLFWkeyfun) -> GLFWkeyfun #foreign libglfw "_glfwSetKeyCallback";

glfwSetCharCallback :: (window: *GLFWwindow, callback: GLFWcharfun) -> GLFWcharfun #foreign libglfw "_glfwSetCharCallback";

glfwSetCharModsCallback :: (window: *GLFWwindow, callback: GLFWcharmodsfun) -> GLFWcharmodsfun #foreign libglfw "_glfwSetCharModsCallback";

glfwSetMouseButtonCallback :: (window: *GLFWwindow, callback: GLFWmousebuttonfun) -> GLFWmousebuttonfun #foreign libglfw "_glfwSetMouseButtonCallback";

glfwSetCursorPosCallback :: (window: *GLFWwindow, callback: GLFWcursorposfun) -> GLFWcursorposfun #foreign libglfw "_glfwSetCursorPosCallback";

glfwSetCursorEnterCallback :: (window: *GLFWwindow, callback: GLFWcursorenterfun) -> GLFWcursorenterfun #foreign libglfw "_glfwSetCursorEnterCallback";

glfwSetScrollCallback :: (window: *GLFWwindow, callback: GLFWscrollfun) -> GLFWscrollfun #foreign libglfw "_glfwSetScrollCallback";

glfwSetDropCallback :: (window: *GLFWwindow, callback: GLFWdropfun) -> GLFWdropfun #foreign libglfw "_glfwSetDropCallback";

glfwJoystickPresent :: (jid: s32) -> s32 #foreign libglfw "_glfwJoystickPresent";

glfwGetJoystickAxes :: (jid: s32, count: *s32) -> *float #foreign libglfw "_glfwGetJoystickAxes";

glfwGetJoystickButtons :: (jid: s32, count: *s32) -> *u8 #foreign libglfw "_glfwGetJoystickButtons";

glfwGetJoystickHats :: (jid: s32, count: *s32) -> *u8 #foreign libglfw "_glfwGetJoystickHats";

glfwGetJoystickName :: (jid: s32) -> *u8 #foreign libglfw "_glfwGetJoystickName";

glfwGetJoystickGUID :: (jid: s32) -> *u8 #foreign libglfw "_glfwGetJoystickGUID";

glfwSetJoystickUserPointer :: (jid: s32, pointer: *void) -> void #foreign libglfw "_glfwSetJoystickUserPointer";

glfwGetJoystickUserPointer :: (jid: s32) -> *void #foreign libglfw "_glfwGetJoystickUserPointer";

glfwJoystickIsGamepad :: (jid: s32) -> s32 #foreign libglfw "_glfwJoystickIsGamepad";

glfwSetJoystickCallback :: (callback: GLFWjoystickfun) -> GLFWjoystickfun #foreign libglfw "_glfwSetJoystickCallback";

glfwUpdateGamepadMappings :: (_string: *u8) -> s32 #foreign libglfw "_glfwUpdateGamepadMappings";

glfwGetGamepadName :: (jid: s32) -> *u8 #foreign libglfw "_glfwGetGamepadName";

glfwGetGamepadState :: (jid: s32, state: *GLFWgamepadstate) -> s32 #foreign libglfw "_glfwGetGamepadState";

glfwSetClipboardString :: (window: *GLFWwindow, _string: *u8) -> void #foreign libglfw "_glfwSetClipboardString";

glfwGetClipboardString :: (window: *GLFWwindow) -> *u8 #foreign libglfw "_glfwGetClipboardString";

glfwGetTime :: () -> float64 #foreign libglfw "_glfwGetTime";

glfwSetTime :: (time: float64) -> void #foreign libglfw "_glfwSetTime";

glfwGetTimerValue :: () -> u64 #foreign libglfw "_glfwGetTimerValue";

glfwGetTimerFrequency :: () -> u64 #foreign libglfw "_glfwGetTimerFrequency";

glfwMakeContextCurrent :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwMakeContextCurrent";

glfwGetCurrentContext :: () -> *GLFWwindow #foreign libglfw "_glfwGetCurrentContext";

glfwSwapBuffers :: (window: *GLFWwindow) -> void #foreign libglfw "_glfwSwapBuffers";

glfwSwapInterval :: (interval: s32) -> void #foreign libglfw "_glfwSwapInterval";

glfwExtensionSupported :: (extension: *u8) -> s32 #foreign libglfw "_glfwExtensionSupported";

glfwGetProcAddress :: (procname: *u8) -> GLFWglproc #foreign libglfw "_glfwGetProcAddress";

glfwVulkanSupported :: () -> s32 #foreign libglfw "_glfwVulkanSupported";

#scope_file

libglfw :: #foreign_system_library "libglfw";
#scope_file

#if OS == .WINDOWS {
    libglfw :: #foreign_library "win/glfw";
} else #if OS == .LINUX {
    libglfw :: #foreign_library "linux/libglfw.so";
} else #if OS == .MACOS {
    libglfw :: #foreign_library "mac/libglfw.dylib";
}
