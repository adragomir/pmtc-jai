// Code generated by protoc-gen-jai

#import "proto";
#import "Basic";
#import "Deep_Copy";

Value :: struct {
    type: ValueType;
    halbit: *bool;
    halfloat: *float64;
    hals32: *s32;
    halu32: *u32;
    v_bytes: *string;
    v_int32: *s32;
    v_int64: *s64;
    v_uint32: *u32;
    v_uint64: *u64;
    v_double: *float64;
    v_string: *string;
    v_bool: *bool;
    carte: *PmCartesian;
    pose: *EmcPose;

    _desc_table :: struct {
        type := FieldDesc.{tag=10, type=type_of(ValueType), optional=false, repeated=false, wt=.Varint};
        halbit := FieldDesc.{tag=100, type=type_of(bool), optional=true, repeated=false, wt=.Varint};
        halfloat := FieldDesc.{tag=101, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        hals32 := FieldDesc.{tag=102, type=type_of(s32), optional=true, repeated=false, wt=.Fixed32};
        halu32 := FieldDesc.{tag=103, type=type_of(u32), optional=true, repeated=false, wt=.Fixed32};
        v_bytes := FieldDesc.{tag=120, type=type_of(string), optional=true, repeated=false, wt=.Size};
        v_int32 := FieldDesc.{tag=130, type=type_of(s32), optional=true, repeated=false, wt=.Fixed32};
        v_int64 := FieldDesc.{tag=140, type=type_of(s64), optional=true, repeated=false, wt=.Fixed64};
        v_uint32 := FieldDesc.{tag=150, type=type_of(u32), optional=true, repeated=false, wt=.Fixed32};
        v_uint64 := FieldDesc.{tag=160, type=type_of(u64), optional=true, repeated=false, wt=.Fixed64};
        v_double := FieldDesc.{tag=170, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        v_string := FieldDesc.{tag=180, type=type_of(string), optional=true, repeated=false, wt=.Size};
        v_bool := FieldDesc.{tag=190, type=type_of(bool), optional=true, repeated=false, wt=.Varint};
        carte := FieldDesc.{tag=200, type=type_of(PmCartesian), optional=true, repeated=false, wt=.Size};
        pose := FieldDesc.{tag=220, type=type_of(EmcPose), optional=true, repeated=false, wt=.Size};
    };

    encode :: (b: *[..]u8, self: Value) {
        #insert #run encode_code_writer(Value.{});
    }

    decode :: (b: []u8) -> Value {
        #insert #run decode_code_writer(Value.{});
    }

};
#insert #run setters_code_writer(Value.{});
