// Code generated by protoc-gen-jai

#import "proto";
#import "Basic";
#import "Deep_Copy";


ApplicationType :: enum s32 {
    QT5_QML :: 1;
    GLADEVCP :: 2;
    JAVASCRIPT :: 3;
};

FileContent :: enum s32 {
    CLEARTEXT :: 1;
    ZLIB :: 2;
};
File :: struct {
    name: string;
    encoding: FileContent;
    blob: *string;

    _desc_table :: struct {
        name := FieldDesc.{tag=1, type=type_of(string), optional=false, repeated=false, wt=.Size};
        encoding := FieldDesc.{tag=2, type=type_of(FileContent), optional=false, repeated=false, wt=.Varint};
        blob := FieldDesc.{tag=3, type=type_of(string), optional=true, repeated=false, wt=.Size};
    };

    encode :: (b: *[..]u8, self: File) {
        #insert #run encode_code_writer(File.{});
    }

    decode :: (b: []u8) -> File {
        #insert #run decode_code_writer(File.{});
    }

};
#insert #run setters_code_writer(File.{});
Application :: struct {
    name: string;
    description: *string;
    type: *ApplicationType;
    weburi: *string;
    file: [..]File;

    _desc_table :: struct {
        name := FieldDesc.{tag=1, type=type_of(string), optional=false, repeated=false, wt=.Size};
        description := FieldDesc.{tag=2, type=type_of(string), optional=true, repeated=false, wt=.Size};
        type := FieldDesc.{tag=3, type=type_of(ApplicationType), optional=true, repeated=false, wt=.Varint};
        weburi := FieldDesc.{tag=4, type=type_of(string), optional=true, repeated=false, wt=.Size};
        file := FieldDesc.{tag=5, type=type_of(File), optional=false, repeated=true, wt=.Size};
    };

    encode :: (b: *[..]u8, self: Application) {
        #insert #run encode_code_writer(Application.{});
    }

    decode :: (b: []u8) -> Application {
        #insert #run decode_code_writer(Application.{});
    }

};
#insert #run setters_code_writer(Application.{});
StdoutLine :: struct {
    index: s32;
    line: *string;

    _desc_table :: struct {
        index := FieldDesc.{tag=1, type=type_of(s32), optional=false, repeated=false, wt=.ZigZag};
        line := FieldDesc.{tag=2, type=type_of(string), optional=true, repeated=false, wt=.Size};
    };

    encode :: (b: *[..]u8, self: StdoutLine) {
        #insert #run encode_code_writer(StdoutLine.{});
    }

    decode :: (b: []u8) -> StdoutLine {
        #insert #run decode_code_writer(StdoutLine.{});
    }

};
#insert #run setters_code_writer(StdoutLine.{});
MachineInfo :: struct {
    type: *string;
    manufacturer: *string;
    model: *string;
    variant: *string;

    _desc_table :: struct {
        type := FieldDesc.{tag=1, type=type_of(string), optional=true, repeated=false, wt=.Size};
        manufacturer := FieldDesc.{tag=2, type=type_of(string), optional=true, repeated=false, wt=.Size};
        model := FieldDesc.{tag=3, type=type_of(string), optional=true, repeated=false, wt=.Size};
        variant := FieldDesc.{tag=4, type=type_of(string), optional=true, repeated=false, wt=.Size};
    };

    encode :: (b: *[..]u8, self: MachineInfo) {
        #insert #run encode_code_writer(MachineInfo.{});
    }

    decode :: (b: []u8) -> MachineInfo {
        #insert #run decode_code_writer(MachineInfo.{});
    }

};
#insert #run setters_code_writer(MachineInfo.{});
Launcher :: struct {
    index: s32;
    name: *string;
    description: *string;
    image: *File;
    info: *MachineInfo;
    running: *bool;
    terminating: *bool;
    command: *string;
    shell: *bool;
    output: [..]StdoutLine;
    returncode: *s32;
    workdir: *string;
    priority: *u32;
    importance: *u32;

    _desc_table :: struct {
        index := FieldDesc.{tag=1, type=type_of(s32), optional=false, repeated=false, wt=.ZigZag};
        name := FieldDesc.{tag=2, type=type_of(string), optional=true, repeated=false, wt=.Size};
        description := FieldDesc.{tag=3, type=type_of(string), optional=true, repeated=false, wt=.Size};
        image := FieldDesc.{tag=4, type=type_of(File), optional=true, repeated=false, wt=.Size};
        info := FieldDesc.{tag=5, type=type_of(MachineInfo), optional=true, repeated=false, wt=.Size};
        running := FieldDesc.{tag=6, type=type_of(bool), optional=true, repeated=false, wt=.Varint};
        terminating := FieldDesc.{tag=7, type=type_of(bool), optional=true, repeated=false, wt=.Varint};
        command := FieldDesc.{tag=8, type=type_of(string), optional=true, repeated=false, wt=.Size};
        shell := FieldDesc.{tag=9, type=type_of(bool), optional=true, repeated=false, wt=.Varint};
        output := FieldDesc.{tag=10, type=type_of(StdoutLine), optional=false, repeated=true, wt=.Size};
        returncode := FieldDesc.{tag=11, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        workdir := FieldDesc.{tag=12, type=type_of(string), optional=true, repeated=false, wt=.Size};
        priority := FieldDesc.{tag=13, type=type_of(u32), optional=true, repeated=false, wt=.Varint};
        importance := FieldDesc.{tag=14, type=type_of(u32), optional=true, repeated=false, wt=.Varint};
    };

    encode :: (b: *[..]u8, self: Launcher) {
        #insert #run encode_code_writer(Launcher.{});
    }

    decode :: (b: []u8) -> Launcher {
        #insert #run decode_code_writer(Launcher.{});
    }

};
#insert #run setters_code_writer(Launcher.{});
