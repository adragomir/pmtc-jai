// Code generated by protoc-gen-jai

#import "proto";
#import "Basic";
#import "Deep_Copy";


KinematicsType :: enum s32 {
    KT_JOINT :: 1;
    KT_TRIVKINS :: 2;
    KT_DELTA :: 3;
};

PreviewOpType :: enum s32 {
    PV_STRAIGHT_PROBE :: 1;
    PV_RIGID_TAP :: 2;
    PV_STRAIGHT_FEED :: 3;
    PV_ARC_FEED :: 4;
    PV_STRAIGHT_TRAVERSE :: 5;
    PV_SET_G5X_OFFSET :: 6;
    PV_SET_G92_OFFSET :: 7;
    PV_SET_XY_ROTATION :: 8;
    PV_SELECT_PLANE :: 9;
    PV_SET_TRAVERSE_RATE :: 10;
    PV_SET_FEED_RATE :: 11;
    PV_CHANGE_TOOL :: 12;
    PV_CHANGE_TOOL_NUMBER :: 13;
    PV_DWELL :: 14;
    PV_MESSAGE :: 15;
    PV_COMMENT :: 16;
    PV_USE_TOOL_OFFSET :: 17;
    PV_SET_PARAMS :: 18;
    PV_SET_FEED_MODE :: 19;
    PV_SOURCE_CONTEXT :: 20;
    PV_PREVIEW_START :: 21;
    PV_PREVIEW_END :: 22;
};

SourceType :: enum s32 {
    ST_NGC_FILE :: 1;
    ST_NGC_STRING :: 2;
    ST_PYTHON_METHOD :: 3;
};
Position :: struct {
    x: *float64;
    y: *float64;
    z: *float64;
    a: *float64;
    b: *float64;
    c: *float64;
    u: *float64;
    v: *float64;
    w: *float64;

    _desc_table :: struct {
        x := FieldDesc.{tag=3, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        y := FieldDesc.{tag=4, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        z := FieldDesc.{tag=5, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        a := FieldDesc.{tag=6, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        b := FieldDesc.{tag=7, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        c := FieldDesc.{tag=8, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        u := FieldDesc.{tag=9, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        v := FieldDesc.{tag=10, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        w := FieldDesc.{tag=11, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
    };

    encode :: (b: *[..]u8, self: Position) {
        #insert #run encode_code_writer(Position.{});
    }

    decode :: (b: []u8) -> Position {
        #insert #run decode_code_writer(Position.{});
    }

};
#insert #run setters_code_writer(Position.{});
Preview :: struct {
    type: PreviewOpType;
    line_number: *s32;
    pos: *Position;
    first_end: *float64;
    second_end: *float64;
    first_axis: *float64;
    second_axis: *float64;
    rotation: *s32;
    axis_end_point: *float64;
    xy_rotation: *float64;
    plane: *s32;
    rate: *float64;
    feed_mode: *s32;
    time: *float64;
    text: *string;
    angular_units: *float64;
    length_units: *float64;
    probetype: *s32;
    kins: *KinematicsType;
    axismask: *s32;
    g5_index: *s32;
    pocket: *s32;
    stype: *SourceType;
    filename: *string;
    cmdstring: *string;
    call_level: *s32;

    _desc_table :: struct {
        type := FieldDesc.{tag=1, type=type_of(PreviewOpType), optional=false, repeated=false, wt=.Varint};
        line_number := FieldDesc.{tag=2, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        pos := FieldDesc.{tag=3, type=type_of(Position), optional=true, repeated=false, wt=.Size};
        first_end := FieldDesc.{tag=4, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        second_end := FieldDesc.{tag=5, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        first_axis := FieldDesc.{tag=6, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        second_axis := FieldDesc.{tag=7, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        rotation := FieldDesc.{tag=8, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        axis_end_point := FieldDesc.{tag=9, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        xy_rotation := FieldDesc.{tag=10, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        plane := FieldDesc.{tag=11, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        rate := FieldDesc.{tag=12, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        feed_mode := FieldDesc.{tag=13, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        time := FieldDesc.{tag=14, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        text := FieldDesc.{tag=15, type=type_of(string), optional=true, repeated=false, wt=.Size};
        angular_units := FieldDesc.{tag=101, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        length_units := FieldDesc.{tag=102, type=type_of(float64), optional=true, repeated=false, wt=.Fixed64};
        probetype := FieldDesc.{tag=103, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        kins := FieldDesc.{tag=104, type=type_of(KinematicsType), optional=true, repeated=false, wt=.Varint};
        axismask := FieldDesc.{tag=105, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        g5_index := FieldDesc.{tag=106, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        pocket := FieldDesc.{tag=107, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        stype := FieldDesc.{tag=110, type=type_of(SourceType), optional=true, repeated=false, wt=.Varint};
        filename := FieldDesc.{tag=111, type=type_of(string), optional=true, repeated=false, wt=.Size};
        cmdstring := FieldDesc.{tag=112, type=type_of(string), optional=true, repeated=false, wt=.Size};
        call_level := FieldDesc.{tag=113, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
    };

    encode :: (b: *[..]u8, self: Preview) {
        #insert #run encode_code_writer(Preview.{});
    }

    decode :: (b: []u8) -> Preview {
        #insert #run decode_code_writer(Preview.{});
    }

};
#insert #run setters_code_writer(Preview.{});
