// Code generated by protoc-gen-jai

#import "proto";
#import "Basic";
#import "Deep_Copy";

Container :: struct {
    type: ContainerType;
    tsc: *s64;
    preview: [..]Preview;
    motcmd: *MotionCommand;
    motstat: *MotionStatus;
    legacy_motcmd: *string;
    legacy_motstat: *string;
    rtapi_message: *RTAPI_Message;
    task_reply: *TaskReply;
    ticket_update: *TicketUpdate;
    syslog: *string;
    legacy_nml: *string;
    legacy_motconfig: *string;
    tv_sec: *s32;
    tv_nsec: *s32;
    topic: *string;
    reply_required: *bool;
    interp_state: *InterpreterStateType;
    interp_name: *string;
    rsvp: *s32;
    in_reply_to: *ContainerType;
    rcs_status: *RCS_STATUS;
    status: *StatusType;
    serial: *s32;
    reply_serial: *s32;
    ticket: *s32;
    reply_ticket: *s32;
    sequence: *s32;
    credit: *s32;
    line_number: *s32;
    name: *string;
    note: [..]string;
    retcode: *s32;
    uuid: *string;
    trace: *bool;
    instance: *s32;
    value: [..]Value;
    rtapicmd: *RTAPICommand;
    service_announcement: [..]ServiceAnnouncement;
    comp: [..]Component;
    pin: [..]Pin;
    signal: [..]Signal;
    param: [..]Param;
    thread: [..]Thread;
    ring: [..]Ring;
    group: [..]Group;
    member: [..]Member;
    function: [..]Function;
    pparams: *ProtocolParameters;
    vtable: [..]Vtable;
    inst: [..]Inst;
    app: [..]Application;
    launcher: [..]Launcher;
    index: *s32;
    log_message: *LogMessage;
    tpexecute: *TaskPlanExecute;
    tpblockdelete: *TaskPlanBlockDelete;
    tpoptionalstop: *TaskPlanOptionalStop;
    tpopen: *TaskPlanOpen;
    taskplan_reply: *TaskPlanReply;
    traj_set_g5x: *Emc_Traj_Set_G5x;
    traj_set_g92: *Emc_Traj_Set_G92;
    traj_set_rotation: *Emc_Traj_Set_Rotation;
    traj_linear_move: *Emc_Traj_Linear_Move;
    traj_probe: *Emc_Traj_Probe;
    traj_circular_move: *Emc_Traj_Circular_Move;
    traj_rigid_tap: *Emc_Traj_Rigid_Tap;
    traj_set_term_cond: *Emc_Traj_Set_Term_Cond;
    traj_set_spindlesync: *Emc_Traj_Set_Spindlesync;
    traj_delay: *Emc_Traj_Delay;
    spindle_on: *Emc_Spindle_On;
    spindle_speed: *Emc_Spindle_Speed;
    spindle_orient: *Emc_Spindle_Orient;
    spindle_wait_orient_complete: *Emc_Spindle_Wait_Orient_Complete;
    tool_set_offet: *Emc_Tool_Set_Offset;
    traj_set_offset: *Emc_Traj_Set_Offset;
    tool_prepare: *Emc_Tool_Prepare;
    tool_set_number: *Emc_Tool_Set_Number;
    traj_set_fo_enable: *Emc_Traj_Set_Fo_Enable;
    traj_set_so_enable: *Emc_Traj_Set_So_Enable;
    traj_set_fh_enable: *Emc_Traj_Set_Fh_Enable;
    motion_adaptive: *Emc_Motion_Adaptive;
    operator_display: *Emc_Operator_Display;
    operator_text: *Emc_Operator_Text;
    operator_error: *Emc_Operator_Error;
    motion_set_dout: *Emc_Motion_Set_Dout;
    motion_set_aout: *Emc_Motion_Set_Aout;
    aux_input_wait: *Emc_Aux_Input_Wait;
    exec_plugin_call: *Emc_Exec_Plugin_Ca1l;
    io_plugin_call: *Emc_Io_Plugin_Call;
    emc_status_config: *EmcStatusConfig;
    emc_status_motion: *EmcStatusMotion;
    emc_status_io: *EmcStatusIo;
    emc_status_task: *EmcStatusTask;
    emc_status_interp: *EmcStatusInterp;
    emc_status_ui: *EmcStatusUI;
    emc_command_params: *EmcCommandParameters;

    _desc_table :: struct {
        type := FieldDesc.{tag=1, type=type_of(ContainerType), optional=false, repeated=false, wt=.Varint};
        tsc := FieldDesc.{tag=7, type=type_of(s64), optional=true, repeated=false, wt=.Fixed64};
        preview := FieldDesc.{tag=8, type=type_of(Preview), optional=false, repeated=true, wt=.Size};
        motcmd := FieldDesc.{tag=9, type=type_of(MotionCommand), optional=true, repeated=false, wt=.Size};
        motstat := FieldDesc.{tag=10, type=type_of(MotionStatus), optional=true, repeated=false, wt=.Size};
        legacy_motcmd := FieldDesc.{tag=11, type=type_of(string), optional=true, repeated=false, wt=.Size};
        legacy_motstat := FieldDesc.{tag=12, type=type_of(string), optional=true, repeated=false, wt=.Size};
        rtapi_message := FieldDesc.{tag=13, type=type_of(RTAPI_Message), optional=true, repeated=false, wt=.Size};
        task_reply := FieldDesc.{tag=14, type=type_of(TaskReply), optional=true, repeated=false, wt=.Size};
        ticket_update := FieldDesc.{tag=15, type=type_of(TicketUpdate), optional=true, repeated=false, wt=.Size};
        syslog := FieldDesc.{tag=18, type=type_of(string), optional=true, repeated=false, wt=.Size};
        legacy_nml := FieldDesc.{tag=19, type=type_of(string), optional=true, repeated=false, wt=.Size};
        legacy_motconfig := FieldDesc.{tag=20, type=type_of(string), optional=true, repeated=false, wt=.Size};
        tv_sec := FieldDesc.{tag=21, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        tv_nsec := FieldDesc.{tag=22, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        topic := FieldDesc.{tag=23, type=type_of(string), optional=true, repeated=false, wt=.Size};
        reply_required := FieldDesc.{tag=24, type=type_of(bool), optional=true, repeated=false, wt=.Varint};
        interp_state := FieldDesc.{tag=25, type=type_of(InterpreterStateType), optional=true, repeated=false, wt=.Varint};
        interp_name := FieldDesc.{tag=26, type=type_of(string), optional=true, repeated=false, wt=.Size};
        rsvp := FieldDesc.{tag=30, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        in_reply_to := FieldDesc.{tag=33, type=type_of(ContainerType), optional=true, repeated=false, wt=.Varint};
        rcs_status := FieldDesc.{tag=35, type=type_of(RCS_STATUS), optional=true, repeated=false, wt=.Varint};
        status := FieldDesc.{tag=40, type=type_of(StatusType), optional=true, repeated=false, wt=.Varint};
        serial := FieldDesc.{tag=45, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        reply_serial := FieldDesc.{tag=50, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        ticket := FieldDesc.{tag=55, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        reply_ticket := FieldDesc.{tag=60, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        sequence := FieldDesc.{tag=62, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        credit := FieldDesc.{tag=65, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        line_number := FieldDesc.{tag=66, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        name := FieldDesc.{tag=67, type=type_of(string), optional=true, repeated=false, wt=.Size};
        note := FieldDesc.{tag=68, type=type_of(string), optional=false, repeated=true, wt=.Size};
        retcode := FieldDesc.{tag=69, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        uuid := FieldDesc.{tag=72, type=type_of(string), optional=true, repeated=false, wt=.Size};
        trace := FieldDesc.{tag=75, type=type_of(bool), optional=true, repeated=false, wt=.Varint};
        instance := FieldDesc.{tag=77, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        value := FieldDesc.{tag=85, type=type_of(Value), optional=false, repeated=true, wt=.Size};
        rtapicmd := FieldDesc.{tag=86, type=type_of(RTAPICommand), optional=true, repeated=false, wt=.Size};
        service_announcement := FieldDesc.{tag=88, type=type_of(ServiceAnnouncement), optional=false, repeated=true, wt=.Size};
        comp := FieldDesc.{tag=100, type=type_of(Component), optional=false, repeated=true, wt=.Size};
        pin := FieldDesc.{tag=2, type=type_of(Pin), optional=false, repeated=true, wt=.Size};
        signal := FieldDesc.{tag=3, type=type_of(Signal), optional=false, repeated=true, wt=.Size};
        param := FieldDesc.{tag=103, type=type_of(Param), optional=false, repeated=true, wt=.Size};
        thread := FieldDesc.{tag=104, type=type_of(Thread), optional=false, repeated=true, wt=.Size};
        ring := FieldDesc.{tag=105, type=type_of(Ring), optional=false, repeated=true, wt=.Size};
        group := FieldDesc.{tag=106, type=type_of(Group), optional=false, repeated=true, wt=.Size};
        member := FieldDesc.{tag=107, type=type_of(Member), optional=false, repeated=true, wt=.Size};
        function := FieldDesc.{tag=108, type=type_of(Function), optional=false, repeated=true, wt=.Size};
        pparams := FieldDesc.{tag=109, type=type_of(ProtocolParameters), optional=true, repeated=false, wt=.Size};
        vtable := FieldDesc.{tag=110, type=type_of(Vtable), optional=false, repeated=true, wt=.Size};
        inst := FieldDesc.{tag=111, type=type_of(Inst), optional=false, repeated=true, wt=.Size};
        app := FieldDesc.{tag=120, type=type_of(Application), optional=false, repeated=true, wt=.Size};
        launcher := FieldDesc.{tag=130, type=type_of(Launcher), optional=false, repeated=true, wt=.Size};
        index := FieldDesc.{tag=131, type=type_of(s32), optional=true, repeated=false, wt=.ZigZag};
        log_message := FieldDesc.{tag=87, type=type_of(LogMessage), optional=true, repeated=false, wt=.Size};
        tpexecute := FieldDesc.{tag=200, type=type_of(TaskPlanExecute), optional=true, repeated=false, wt=.Size};
        tpblockdelete := FieldDesc.{tag=201, type=type_of(TaskPlanBlockDelete), optional=true, repeated=false, wt=.Size};
        tpoptionalstop := FieldDesc.{tag=202, type=type_of(TaskPlanOptionalStop), optional=true, repeated=false, wt=.Size};
        tpopen := FieldDesc.{tag=203, type=type_of(TaskPlanOpen), optional=true, repeated=false, wt=.Size};
        taskplan_reply := FieldDesc.{tag=210, type=type_of(TaskPlanReply), optional=true, repeated=false, wt=.Size};
        traj_set_g5x := FieldDesc.{tag=300, type=type_of(Emc_Traj_Set_G5x), optional=true, repeated=false, wt=.Size};
        traj_set_g92 := FieldDesc.{tag=310, type=type_of(Emc_Traj_Set_G92), optional=true, repeated=false, wt=.Size};
        traj_set_rotation := FieldDesc.{tag=320, type=type_of(Emc_Traj_Set_Rotation), optional=true, repeated=false, wt=.Size};
        traj_linear_move := FieldDesc.{tag=330, type=type_of(Emc_Traj_Linear_Move), optional=true, repeated=false, wt=.Size};
        traj_probe := FieldDesc.{tag=340, type=type_of(Emc_Traj_Probe), optional=true, repeated=false, wt=.Size};
        traj_circular_move := FieldDesc.{tag=350, type=type_of(Emc_Traj_Circular_Move), optional=true, repeated=false, wt=.Size};
        traj_rigid_tap := FieldDesc.{tag=360, type=type_of(Emc_Traj_Rigid_Tap), optional=true, repeated=false, wt=.Size};
        traj_set_term_cond := FieldDesc.{tag=370, type=type_of(Emc_Traj_Set_Term_Cond), optional=true, repeated=false, wt=.Size};
        traj_set_spindlesync := FieldDesc.{tag=380, type=type_of(Emc_Traj_Set_Spindlesync), optional=true, repeated=false, wt=.Size};
        traj_delay := FieldDesc.{tag=390, type=type_of(Emc_Traj_Delay), optional=true, repeated=false, wt=.Size};
        spindle_on := FieldDesc.{tag=400, type=type_of(Emc_Spindle_On), optional=true, repeated=false, wt=.Size};
        spindle_speed := FieldDesc.{tag=410, type=type_of(Emc_Spindle_Speed), optional=true, repeated=false, wt=.Size};
        spindle_orient := FieldDesc.{tag=420, type=type_of(Emc_Spindle_Orient), optional=true, repeated=false, wt=.Size};
        spindle_wait_orient_complete := FieldDesc.{tag=430, type=type_of(Emc_Spindle_Wait_Orient_Complete), optional=true, repeated=false, wt=.Size};
        tool_set_offet := FieldDesc.{tag=440, type=type_of(Emc_Tool_Set_Offset), optional=true, repeated=false, wt=.Size};
        traj_set_offset := FieldDesc.{tag=450, type=type_of(Emc_Traj_Set_Offset), optional=true, repeated=false, wt=.Size};
        tool_prepare := FieldDesc.{tag=460, type=type_of(Emc_Tool_Prepare), optional=true, repeated=false, wt=.Size};
        tool_set_number := FieldDesc.{tag=470, type=type_of(Emc_Tool_Set_Number), optional=true, repeated=false, wt=.Size};
        traj_set_fo_enable := FieldDesc.{tag=480, type=type_of(Emc_Traj_Set_Fo_Enable), optional=true, repeated=false, wt=.Size};
        traj_set_so_enable := FieldDesc.{tag=490, type=type_of(Emc_Traj_Set_So_Enable), optional=true, repeated=false, wt=.Size};
        traj_set_fh_enable := FieldDesc.{tag=500, type=type_of(Emc_Traj_Set_Fh_Enable), optional=true, repeated=false, wt=.Size};
        motion_adaptive := FieldDesc.{tag=510, type=type_of(Emc_Motion_Adaptive), optional=true, repeated=false, wt=.Size};
        operator_display := FieldDesc.{tag=520, type=type_of(Emc_Operator_Display), optional=true, repeated=false, wt=.Size};
        operator_text := FieldDesc.{tag=530, type=type_of(Emc_Operator_Text), optional=true, repeated=false, wt=.Size};
        operator_error := FieldDesc.{tag=540, type=type_of(Emc_Operator_Error), optional=true, repeated=false, wt=.Size};
        motion_set_dout := FieldDesc.{tag=550, type=type_of(Emc_Motion_Set_Dout), optional=true, repeated=false, wt=.Size};
        motion_set_aout := FieldDesc.{tag=560, type=type_of(Emc_Motion_Set_Aout), optional=true, repeated=false, wt=.Size};
        aux_input_wait := FieldDesc.{tag=570, type=type_of(Emc_Aux_Input_Wait), optional=true, repeated=false, wt=.Size};
        exec_plugin_call := FieldDesc.{tag=580, type=type_of(Emc_Exec_Plugin_Ca1l), optional=true, repeated=false, wt=.Size};
        io_plugin_call := FieldDesc.{tag=590, type=type_of(Emc_Io_Plugin_Call), optional=true, repeated=false, wt=.Size};
        emc_status_config := FieldDesc.{tag=600, type=type_of(EmcStatusConfig), optional=true, repeated=false, wt=.Size};
        emc_status_motion := FieldDesc.{tag=601, type=type_of(EmcStatusMotion), optional=true, repeated=false, wt=.Size};
        emc_status_io := FieldDesc.{tag=602, type=type_of(EmcStatusIo), optional=true, repeated=false, wt=.Size};
        emc_status_task := FieldDesc.{tag=603, type=type_of(EmcStatusTask), optional=true, repeated=false, wt=.Size};
        emc_status_interp := FieldDesc.{tag=604, type=type_of(EmcStatusInterp), optional=true, repeated=false, wt=.Size};
        emc_status_ui := FieldDesc.{tag=605, type=type_of(EmcStatusUI), optional=true, repeated=false, wt=.Size};
        emc_command_params := FieldDesc.{tag=610, type=type_of(EmcCommandParameters), optional=true, repeated=false, wt=.Size};
    };

    encode :: (b: *[..]u8, self: Container) {
        #insert #run encode_code_writer(Container.{});
    }

    decode :: (b: []u8) -> Container {
        #insert #run decode_code_writer(Container.{});
    }

};
#insert #run setters_code_writer(Container.{});
