// Code generated by protoc-gen-jai

#import "proto";
#import "Basic";
#import "Deep_Copy";

TaskPlanExecute :: struct {
    command: *string;
    line: *s32;

    _desc_table :: struct {
        command := FieldDesc.{tag=10, type=type_of(string), optional=true, repeated=false, wt=.Size};
        line := FieldDesc.{tag=30, type=type_of(s32), optional=true, repeated=false, wt=.Fixed32};
    };

    encode :: (b: *[..]u8, self: TaskPlanExecute) {
        #insert #run encode_code_writer(TaskPlanExecute.{});
    }

    decode :: (b: []u8) -> TaskPlanExecute {
        #insert #run decode_code_writer(TaskPlanExecute.{});
    }

};
#insert #run setters_code_writer(TaskPlanExecute.{});
TaskPlanBlockDelete :: struct {
    state: bool;

    _desc_table :: struct {
        state := FieldDesc.{tag=10, type=type_of(bool), optional=false, repeated=false, wt=.Varint};
    };

    encode :: (b: *[..]u8, self: TaskPlanBlockDelete) {
        #insert #run encode_code_writer(TaskPlanBlockDelete.{});
    }

    decode :: (b: []u8) -> TaskPlanBlockDelete {
        #insert #run decode_code_writer(TaskPlanBlockDelete.{});
    }

};
#insert #run setters_code_writer(TaskPlanBlockDelete.{});
TaskPlanOptionalStop :: struct {
    state: bool;

    _desc_table :: struct {
        state := FieldDesc.{tag=10, type=type_of(bool), optional=false, repeated=false, wt=.Varint};
    };

    encode :: (b: *[..]u8, self: TaskPlanOptionalStop) {
        #insert #run encode_code_writer(TaskPlanOptionalStop.{});
    }

    decode :: (b: []u8) -> TaskPlanOptionalStop {
        #insert #run decode_code_writer(TaskPlanOptionalStop.{});
    }

};
#insert #run setters_code_writer(TaskPlanOptionalStop.{});
TaskPlanOpen :: struct {
    filename: string;

    _desc_table :: struct {
        filename := FieldDesc.{tag=10, type=type_of(string), optional=false, repeated=false, wt=.Size};
    };

    encode :: (b: *[..]u8, self: TaskPlanOpen) {
        #insert #run encode_code_writer(TaskPlanOpen.{});
    }

    decode :: (b: []u8) -> TaskPlanOpen {
        #insert #run decode_code_writer(TaskPlanOpen.{});
    }

};
#insert #run setters_code_writer(TaskPlanOpen.{});
TaskPlanReply :: struct {
    cmd: ContainerType;
    errormsg: *string;

    _desc_table :: struct {
        cmd := FieldDesc.{tag=10, type=type_of(ContainerType), optional=false, repeated=false, wt=.Varint};
        errormsg := FieldDesc.{tag=20, type=type_of(string), optional=true, repeated=false, wt=.Size};
    };

    encode :: (b: *[..]u8, self: TaskPlanReply) {
        #insert #run encode_code_writer(TaskPlanReply.{});
    }

    decode :: (b: []u8) -> TaskPlanReply {
        #insert #run decode_code_writer(TaskPlanReply.{});
    }

};
#insert #run setters_code_writer(TaskPlanReply.{});
TaskReply :: struct {
    ticket: u32;

    _desc_table :: struct {
        ticket := FieldDesc.{tag=10, type=type_of(u32), optional=false, repeated=false, wt=.Fixed32};
    };

    encode :: (b: *[..]u8, self: TaskReply) {
        #insert #run encode_code_writer(TaskReply.{});
    }

    decode :: (b: []u8) -> TaskReply {
        #insert #run decode_code_writer(TaskReply.{});
    }

};
#insert #run setters_code_writer(TaskReply.{});
TicketUpdate :: struct {
    cticket: u32;
    status: RCS_STATUS;
    text: *string;

    _desc_table :: struct {
        cticket := FieldDesc.{tag=10, type=type_of(u32), optional=false, repeated=false, wt=.Fixed32};
        status := FieldDesc.{tag=20, type=type_of(RCS_STATUS), optional=false, repeated=false, wt=.Varint};
        text := FieldDesc.{tag=30, type=type_of(string), optional=true, repeated=false, wt=.Size};
    };

    encode :: (b: *[..]u8, self: TicketUpdate) {
        #insert #run encode_code_writer(TicketUpdate.{});
    }

    decode :: (b: []u8) -> TicketUpdate {
        #insert #run decode_code_writer(TicketUpdate.{});
    }

};
#insert #run setters_code_writer(TicketUpdate.{});
